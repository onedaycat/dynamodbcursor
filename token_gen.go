package dynamodbcursor

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AttributeValue) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "b":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "BOOL")
					return
				}
				z.BOOL = nil
			} else {
				if z.BOOL == nil {
					z.BOOL = new(bool)
				}
				*z.BOOL, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "BOOL")
					return
				}
			}
		case "n":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "N")
					return
				}
				z.N = nil
			} else {
				if z.N == nil {
					z.N = new(string)
				}
				*z.N, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "N")
					return
				}
			}
		case "nl":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "NULL")
					return
				}
				z.NULL = nil
			} else {
				if z.NULL == nil {
					z.NULL = new(bool)
				}
				*z.NULL, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "NULL")
					return
				}
			}
		case "s":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "S")
					return
				}
				z.S = nil
			} else {
				if z.S == nil {
					z.S = new(string)
				}
				*z.S, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "S")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AttributeValue) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "b"
	err = en.Append(0x84, 0xa1, 0x62)
	if err != nil {
		return
	}
	if z.BOOL == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBool(*z.BOOL)
		if err != nil {
			err = msgp.WrapError(err, "BOOL")
			return
		}
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	if z.N == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.N)
		if err != nil {
			err = msgp.WrapError(err, "N")
			return
		}
	}
	// write "nl"
	err = en.Append(0xa2, 0x6e, 0x6c)
	if err != nil {
		return
	}
	if z.NULL == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBool(*z.NULL)
		if err != nil {
			err = msgp.WrapError(err, "NULL")
			return
		}
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	if z.S == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.S)
		if err != nil {
			err = msgp.WrapError(err, "S")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AttributeValue) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "b"
	o = append(o, 0x84, 0xa1, 0x62)
	if z.BOOL == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBool(o, *z.BOOL)
	}
	// string "n"
	o = append(o, 0xa1, 0x6e)
	if z.N == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.N)
	}
	// string "nl"
	o = append(o, 0xa2, 0x6e, 0x6c)
	if z.NULL == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBool(o, *z.NULL)
	}
	// string "s"
	o = append(o, 0xa1, 0x73)
	if z.S == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.S)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AttributeValue) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "b":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.BOOL = nil
			} else {
				if z.BOOL == nil {
					z.BOOL = new(bool)
				}
				*z.BOOL, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "BOOL")
					return
				}
			}
		case "n":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.N = nil
			} else {
				if z.N == nil {
					z.N = new(string)
				}
				*z.N, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "N")
					return
				}
			}
		case "nl":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.NULL = nil
			} else {
				if z.NULL == nil {
					z.NULL = new(bool)
				}
				*z.NULL, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NULL")
					return
				}
			}
		case "s":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.S = nil
			} else {
				if z.S == nil {
					z.S = new(string)
				}
				*z.S, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "S")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AttributeValue) Msgsize() (s int) {
	s = 1 + 2
	if z.BOOL == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 2
	if z.N == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.N)
	}
	s += 3
	if z.NULL == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 2
	if z.S == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.S)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CursorFields) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(CursorFields, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *AttributeValue
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(AttributeValue)
			}
			err = zb0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z CursorFields) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = zb0005.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CursorFields) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		if zb0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zb0005.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CursorFields) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(CursorFields, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *AttributeValue
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(AttributeValue)
			}
			bts, err = zb0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CursorFields) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004)
			if zb0005 == nil {
				s += msgp.NilSize
			} else {
				s += zb0005.Msgsize()
			}
		}
	}
	return
}
